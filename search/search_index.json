{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"#web-_1","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\"","text":"<ul> <li>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161</li> </ul>"},{"location":"home/","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"home/#web-_1","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\"","text":"<ul> <li>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161</li> </ul>"},{"location":"lab1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161","text":"<ul> <li>\u0412\u0441\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043e\u0442\u0435\u043b\u044f</li> <li>\u0412\u0441\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li>\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0435\u0433\u043e \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c</li> <li>\u041e\u0442\u043c\u0435\u043d\u0430 \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f</li> <li>\u0412\u0441\u0435 \u043e\u0442\u0437\u044b\u0432\u044b</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430</li> <li>\u0421\u0442\u0430\u0440\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0438 \u043d\u0435\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 views.py<pre><code>from allauth.account.views import LoginView, SignupView\nfrom django.contrib import messages\nfrom django.shortcuts import render, HttpResponse, redirect\nfrom django.urls import reverse, reverse_lazy\nfrom django.utils import timezone\nfrom django.views.generic import ListView, FormView, View, DeleteView, UpdateView\nfrom .models import Room, Bookings, Review, Confirmation, Hotel\nfrom .forms import AvailabilityForm, EditBookingForm, ReviewForm\nfrom hotel.booking_functions.availability import check_availability\nfrom hotel.booking_functions.get_room_cat_url_list import get_room_cat_url_list\ndef RoomListView(request):\nroom_category_url_list = get_room_cat_url_list()\ncontext = {\n\"room_list\": get_room_cat_url_list\n}\nreturn render(request, 'room_list_view.html', context)\nclass BookingsListView(ListView):\nmodel = Bookings\ndef get_queryset(self, *args, **kwargs):\nif self.request.user.is_staff:\nbooking_list = Bookings.objects.all()\nreturn booking_list\nelse:\nbooking_list = Bookings.objects.filter(user=self.request.user)\nreturn booking_list\nclass RoomDetailView(View):\ndef get(self, request, *args, **kwargs):\ncategory = self.kwargs.get('category', None)\nform = AvailabilityForm()\nroom_list = Room.objects.filter(category=category)\nif len(room_list) &gt; 0:\nroom = room_list[0]\nroom_category = dict(room.ROOM_CATEGORIES).get(room.category, None)\ncontext = {\n'room_category': room_category,\n'form': form,\n'room_amenities': room.amenities,\n'room_price': room.cost\n}\nreturn render(request, 'room_detail_view.html', context)\nelse:\nreturn HttpResponse('Category does not exist')\ndef post(self, request, *args, **kwargs):\ncategory = self.kwargs.get('category', None)\nroom_list = Room.objects.filter(category=category)\nform = AvailabilityForm(request.POST)\nif form.is_valid():\ndata = form.cleaned_data\navailable_rooms = []\nfor room in room_list:\nif check_availability(room, data['check_in'], data['check_out']):\nif data['check_in'] &gt; timezone.now():\navailable_rooms.append(room)\nelse:\nmessages.error(request, \"You can't book a room for dates in the past.\")\nreturn redirect('hotel:RoomListView')\nelse:\nmessages.error(request, \"You can't book a room with check out earlier than check in.\")\nreturn redirect('hotel:RoomListView')\nif len(available_rooms) &gt; 0:\nroom = available_rooms[0]\nbooking = Bookings.objects.create(\nuser=self.request.user,\nroom=room,\ncheck_in=data['check_in'],\ncheck_out=data['check_out']\n)\nbooking.save()\nconfirmation = Confirmation.objects.create(\nbooking=booking,\nis_confirmed=False,\nconfirmed_by=None\n)\nconfirmation.save()\nmessages.success(request, 'Your booking created')\nreturn redirect('hotel:RoomListView')\nelse:\nmessages.error(request, 'This category of rooms is fully booked. Try another one')\nreturn redirect('hotel:RoomListView')\nclass CancelBookingView(DeleteView):\nmodel = Bookings\ntemplate_name = 'booking_cancel_view.html'\nsuccess_url = reverse_lazy('hotel:BookingsListView')\nclass EditBookingView(UpdateView):\nmodel = Bookings\nform_class = EditBookingForm\ntemplate_name = 'edit_booking.html'\nsuccess_url = reverse_lazy('hotel:BookingsListView')\ndef form_valid(self, form):\nif form.has_changed():\ndata = form.cleaned_data\nroom = data['room']\nif check_availability(room, data['check_in'], data['check_out']):\nif data['check_in'] &gt; timezone.now():\nform.save()\nmessages.success(self.request, 'Your booking has been updated')\nreturn redirect(self.success_url)\nelse:\nmessages.error(self.request, \"You can't book a room for dates in the past.\")\nreturn redirect('hotel:BookingsListView')\nelse:\nmessages.error(self.request, 'This room is fully booked for the selected dates. Try another one')\nreturn redirect('hotel:BookingsListView')\nelse:\nmessages.info(self.request, 'No changes were made')\nreturn redirect('hotel:BookingsListView')\ndef review_list(request):\nreviews = Review.objects.all()\nreturn render(request, 'hotel/review_list.html', {'reviews': reviews})\nclass AddReviewView(View):\ntemplate_name = 'hotel/add_review.html'\ndef get(self, request):\nform = ReviewForm()\nif self.request.user.is_staff:\nreturn render(request, self.template_name, {'form': form})\nelse:\nbookings = Bookings.objects.filter(user=self.request.user, confirmation__is_confirmed=True)\nform.fields['booking'].queryset = bookings\nroom_ids = [booking.room.id for booking in bookings]\nform.fields['room'].queryset = Room.objects.filter(id__in=room_ids)\nreturn render(request, self.template_name, {'form': form})\ndef post(self, request):\nform = ReviewForm(request.POST)\nuser = self.request.user\nif form.is_valid():\nbooking_id = form.cleaned_data['booking'].id\nroom_id = form.cleaned_data['room'].id\nrating = form.cleaned_data['rating']\ntext = form.cleaned_data['text']\n# Check if the user is a staff member\nif user.is_staff:\n# Staff members can create reviews for any booking and room\nreview = Review.objects.create(user=user, booking_id=booking_id, room_id=room_id, rating=rating,\ntext=text)\nreview.save()\nelse:\nbookings = Bookings.objects.filter(user=user)\nform.fields['booking'].queryset = bookings\nroom_ids = [booking.room.id for booking in bookings]\nform.fields['room'].queryset = Room.objects.filter(id__in=room_ids)\n# Check if the form is valid again after updating querysets\nif form.is_valid():\nreview = Review.objects.create(user=user, booking_id=booking_id, room_id=room_id, rating=rating,\ntext=text)\nreview.save()\nreturn redirect('hotel:review_list')\nelse:\nreturn redirect('hotel:review_list')\ndef IndexView(request):\nhotel_info = Hotel.objects.first()\ncontext = {\n\"hotel_info\": hotel_info\n}\nreturn render(request, 'index.html', context)\ndef HomeView(request):\nreturn render(request, 'home.html')\n</code></pre></li> </ul>"}]}