{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"#web-_1","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\"","text":"<ul> <li>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161</li> </ul>"},{"location":"home/","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"home/#web-_1","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\"","text":"<ul> <li>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161</li> </ul>"},{"location":"lab1/","title":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0431\u0443\u043a\u043a\u0440\u043e\u0441\u0438\u043d\u0433\u0430","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430 - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b, \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435:</p> <ul> <li> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435, \u0441\u0432\u043e\u0438\u0445 \u043d\u0430\u0432\u044b\u043a\u0430\u0445, \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c.</p> </li> <li> <p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u0433\u043e\u0442\u043e\u0432\u044b \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f, \u0432 \u0441\u0432\u043e\u044e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435.</p> </li> <li> <p>\u041f\u043e\u0438\u0441\u043a \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d: \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c.</p> </li> <li> <p>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u043e\u0431\u043c\u0435\u043d\u0430\u043c\u0438: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. </p> </li> </ul>"},{"location":"lab1/#_1","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0437 \u0441\u0432\u043e\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 </p> <p>\u0417\u0430\u043f\u0438\u0441\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0430\u0431\u043e\u0442 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435!</p>"},{"location":"lab1/#_2","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":"models.py<pre><code>from enum import Enum\nfrom typing import Optional, List, Union\nfrom sqlalchemy import Column, Integer, Boolean, ForeignKey\nfrom sqlalchemy.orm import relationship\n# from pydantic import BaseModel\nfrom sqlmodel import SQLModel, Field, Relationship\nclass BookGenres(str, Enum):\nFiction = \"fiction\"\nNonFiction = \"non-fiction\"\nMystery = \"mystery\"\nRomance = \"romance\"\nScienceFiction = \"science-fiction\"\nclass AuthorBookLink(SQLModel, table=True):\n__tablename__ = \"author_book_link\"\nauthor_id: int = Field(default=None, foreign_key=\"author.id\", primary_key=True)\nbook_id: int = Field(default=None, foreign_key=\"book.id\", primary_key=True)\nclass AuthorDefault(SQLModel):\nname: str\nbio: Optional[str]\ncountry: Optional[str] = \"\"\nclass Author(AuthorDefault, table=True):\nid: int = Field(default=None, primary_key=True)\nbooks: List[\"Book\"] = Relationship(back_populates=\"authors\", link_model=AuthorBookLink)\nclass ExchangeRequest(SQLModel, table=True):\n__tablename__ = \"exchange_request\"\nid: int = Field(primary_key=True)\naccepted: bool\nsender_id: int = Field(default=None, foreign_key=\"user_profile.id\")\nreceiver_id: int = Field(default=None, foreign_key=\"user_profile.id\")\nsender: Optional[\"UserProfile\"] = Relationship(\nback_populates=\"sent_requests\",\nsa_relationship_kwargs={\"foreign_keys\": \"ExchangeRequest.sender_id\"}\n)\nreceiver: Optional[\"UserProfile\"] = Relationship(\nback_populates=\"received_requests\",\nsa_relationship_kwargs={\"foreign_keys\": \"ExchangeRequest.receiver_id\"}\n)\nclass UserDefault(SQLModel):\nusername: str\nfirstname: Optional[str]\nlastname: Optional[str]\nage: int\nlocation: Optional[str]\nbio: Optional[str]\nclass UserProfile(UserDefault, table=True):\n__tablename__ = \"user_profile\"\nid: int = Field(default=None, primary_key=True)\n# exchange_requests: List[\"ExchangeRequest\"] = Relationship(\n#     back_populates=\"users\",\n#     link_model=ExchangeRequestLink\n# )\npassword_hash: str = Field(default=None)\nsent_requests: Optional[List[\"ExchangeRequest\"]] = Relationship(\nback_populates=\"sender\",\nsa_relationship_kwargs={\"foreign_keys\": \"ExchangeRequest.sender_id\"}\n)\nreceived_requests: Optional[List[\"ExchangeRequest\"]] = Relationship(\nback_populates=\"receiver\",\nsa_relationship_kwargs={\"foreign_keys\": \"ExchangeRequest.receiver_id\"}\n)\n# library: Optional[\"UserLibrary\"] = Relationship(back_populates=\"user_profile\")\nclass BookDefault(SQLModel):\ntitle: str\n# author_id: int = Field(foreign_key=\"author.id\")\ngenre: Optional[BookGenres]\nbio: Optional[str] = \"\"\nclass UserLibrary(SQLModel, table=True):\n__tablename__ = \"user_library\"\nid: int = Field(primary_key=True)\nuser_id: int = Field(foreign_key=\"user_profile.id\")\nbook_id: int = Field(foreign_key=\"book.id\")\n# user_profile: UserProfile = Relationship(back_populates=\"library\")\nbooks_library: Optional[List[\"Book\"]] = Relationship(back_populates=\"user_library\")\nclass Book(BookDefault, table=True):\n__tablename__ = \"book\"\nid: int = Field(default=None, primary_key=True)\n# user_library_id: int = Field(default=None, foreign_key=\"user_library.id\")\nuser_library: UserLibrary = Relationship(back_populates=\"books_library\")\nauthors: Optional[List[\"Author\"]] = Relationship(back_populates=\"books\", link_model=AuthorBookLink)\nclass BooksAuthor(BookDefault):\nauthor: Optional[Author] = None\nclass BookWithAuthors(SQLModel):\nbook: BookDefault\nauthor_ids: List[int]\nclass Token(SQLModel):\naccess_token: str\ntoken_type: str\nclass TokenData(SQLModel):\nusername: Union[str, None] = None\n</code></pre>"},{"location":"lab1/#_3","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b","text":""},{"location":"lab1/#_4","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<pre><code>app = FastAPI()\nauth = Authorization()\n@app.on_event(\"startup\")\ndef on_startup():\ninit_db()\n@app.post(\"/register\")\ndef register(username: str, password: str, firstname: str = None, lastname: str = None,\nage: int = None, location: str = None, bio: str = None, session=Depends(get_session)):\n# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0436\u0435\nexisting_user = session.exec(select(UserProfile).where(UserProfile.username == username)).first()\nif existing_user:\nraise HTTPException(status_code=400, detail=\"User already exists\")\n# \u0425\u044d\u0448\u0438\u0440\u0443\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u044c\nhashed_password = auth.get_password_hash(password)\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nnew_user = UserProfile(username=username, firstname=firstname, lastname=lastname,\nage=age, location=location, bio=bio, password_hash=hashed_password)\nsession.add(new_user)\nsession.commit()\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c JWT \u0442\u043e\u043a\u0435\u043d\ntoken = auth.encode_token(new_user.id)\n# \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\nreturn {\"message\": \"User registered successfully\", \"token\": token}\n</code></pre>"},{"location":"lab1/#_5","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<pre><code>@app.post(\"/login\")\ndef login(username: str, password: str, auth: Authorization = Depends(), session=Depends(get_session)):\ntry:\n# \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\nuser = auth.authenticate_user(username, password, session)\n# \u0415\u0441\u043b\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0441\u043e\u0437\u0434\u0430\u0435\u043c JWT \u0442\u043e\u043a\u0435\u043d\ntoken = auth.encode_token(user.id)\n# \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0442\u043e\u043a\u0435\u043d\nreturn {\"token\": token}\nexcept HTTPException as e:\n# \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0432\u043e\u0437\u0431\u0443\u0436\u0434\u0430\u0435\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441 \u043a\u043e\u0434\u043e\u043c \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \u0438\u0437 HTTPException\nraise e\n</code></pre>"},{"location":"lab1/#_6","title":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<pre><code>@app.put(\"/change_password/{username}\")\ndef change_password(username: str, old_password: str, new_password: str, auth: Authorization = Depends(),\nsession=Depends(get_session)):\ntry:\n# \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f\nuser = auth.authenticate_user(username, old_password, session)\n# \u0425\u044d\u0448\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c\nhashed_new_password = auth.get_password_hash(new_password)\n# \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nuser.password_hash = hashed_new_password\nsession.commit()\nreturn {\"message\": \"Password changed successfully\"}\nexcept HTTPException as e:\n# \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0432\u043e\u0437\u0431\u0443\u0436\u0434\u0430\u0435\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441 \u043a\u043e\u0434\u043e\u043c \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \u0438\u0437 HTTPException\nraise e\n</code></pre>"},{"location":"lab1/#_7","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435","text":"<pre><code>@app.get(\"/users_list\")\ndef users_list(session=Depends(get_session)) -&gt; List[UserProfile]:\nreturn session.exec(select(UserProfile)).all()\n@app.get(\"/user/{user_id}\")\ndef get_user(username: str, session=Depends(get_session)) -&gt; UserProfile:\nuser = session.exec(select(UserProfile).where(UserProfile.username == username)).first()\nif user:\nreturn {\n\"id\": user.id,\n\"username\": user.username,\n\"firstname\": user.firstname,\n\"lastname\": user.lastname,\n\"age\": user.age,\n\"location\": user.location,\n\"bio\": user.bio\n}\nelse:\nraise HTTPException(status_code=404, detail=\"User not found\")\n@app.delete(\"/user/user{user_id}\")\ndef delete_user(user_id: int, session=Depends(get_session)):\nuser = session.get(UserProfile, user_id)\nif not user:\nraise HTTPException(status_code=404, detail=\"User not found\")\nsession.delete(user)\nsession.commit()\nreturn {\"ok\": True}\n@app.patch(\"/user{user_id}\")\ndef update_user(user_id: int, user: UserDefault, session=Depends(get_session)) -&gt; UserDefault:\ndb_user = session.get(UserProfile, user_id)\nif not db_user:\nraise HTTPException(status_code=404, detail=\"User not found\")\nuser_data = user.model_dump(exclude_unset=True)\nfor key, value in user_data.items():\nsetattr(db_user, key, value)\nsession.add(db_user)\nsession.commit()\nsession.refresh(db_user)\nreturn db_user\n</code></pre>"},{"location":"lab1/#_8","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0430\u0432\u0442\u043e\u0440\u043e\u0432, \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0430\u0432\u0442\u043e\u0440\u0435, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435","text":"<pre><code>@app.get(\"/author_list\")\ndef authors_list(session=Depends(get_session)) -&gt; List[Author]:\nreturn session.exec(select(Author)).all()\n@app.get(\"/author/{author_id}\")\ndef get_author(author_id: int, session=Depends(get_session)) -&gt; Author:\nauthor = session.exec(select(Author).where(Author.id == author_id)).first()\nif author:\nreturn author\nelse:\nraise HTTPException(status_code=404, detail=\"Author not found\")\n@app.post(\"/author\")\ndef create_author(author: AuthorDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int,\n\"data\": Author}):\nvalidated_author = Author.model_validate(author)\nsession.add(validated_author)\nsession.commit()\nsession.refresh(validated_author)\nreturn {\"status\": 200, \"data\": validated_author}\n@app.delete(\"/author/author{author_id}\")\ndef delete_author(author_id: int, session=Depends(get_session)):\nauthor = session.get(Author, author_id)\nif not author:\nraise HTTPException(status_code=404, detail=\"User not found\")\nsession.delete(author)\nsession.commit()\nreturn {\"ok\": True}\n</code></pre>"},{"location":"lab1/#_9","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u043d\u0438\u0433, \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435","text":"<pre><code>@app.get(\"/book_list\", response_model=List[BookWithAuthors])\ndef get_books(session=Depends(get_session)):\nbooks = session.exec(select(Book)).all()\n# \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0438 \u0438\u0445 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b\nbooks_with_authors = []\nfor book in books:\nauthor_links = session.exec(select(AuthorBookLink).where(AuthorBookLink.book_id == book.id)).all()\nauthor_ids = [link.author_id for link in author_links]\nbooks_with_authors.append(BookWithAuthors(book=book, author_ids=author_ids))\nreturn books_with_authors\n@app.get(\"/book/{book_id}\")\ndef get_book(book_id: int, session=Depends(get_session)) -&gt; BookWithAuthors:\nquery = select(Book).where(Book.id == book_id)\nbook = session.exec(query).first()\nif not book:\nraise HTTPException(status_code=404, detail=\"Book not found\")\nauthor_links = session.exec(select(AuthorBookLink).where(AuthorBookLink.book_id == book_id)).all()\nauthor_ids = [link.author_id for link in author_links]\nreturn BookWithAuthors(book=book, author_ids=author_ids)\n@app.post(\"/book\", response_model=Book)\ndef create_book(book_data: BookWithAuthors, session=Depends(get_session)) -&gt; Book:\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043d\u0438\u0433\u0443 \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\nbook = Book(**book_data.book.dict())\nsession.add(book)\nsession.commit()\nsession.refresh(book)\n# \u0421\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u043a\u043d\u0438\u0433\u0443 \u0441 \u043a\u0430\u0436\u0434\u044b\u043c \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043f\u043e \u0438\u0445 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c\nfor author_id in book_data.author_ids:\nauthor_book_link = AuthorBookLink(author_id=author_id, book_id=book.id)\nsession.add(author_book_link)\nsession.commit()\nreturn book\n</code></pre>"},{"location":"lab1/#_10","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<pre><code>@app.get(\"/user/{user_id}/library\")\ndef get_user_library(user_id: int, session=Depends(get_session)):\nuser = session.get(UserProfile, user_id)\nif not user:\nraise HTTPException(status_code=404, detail=\"User not found\")\nuser_library = session.exec(select(UserLibrary).where(UserLibrary.user_id == user_id)).all()\nif not user_library:\nreturn {\"message\": \"User library is empty\"}\n# \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0438 \u0438\u0445 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b\nlibrary_with_authors = []\nfor entry in user_library:\nbook = session.get(Book, entry.book_id)\nif book:\nauthor_links = session.exec(select(AuthorBookLink).where(AuthorBookLink.book_id == book.id)).all()\nauthor_ids = [link.author_id for link in author_links]\nlibrary_with_authors.append(BookWithAuthors(book=book, author_ids=author_ids))\nreturn {\"user\": user, \"library\": library_with_authors}\n</code></pre>"},{"location":"lab1/#_11","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<pre><code>@app.post(\"/user/{user_id}/add_book_to_library/{book_id}\")\ndef add_book_to_library(user_id: int, book_id: int, session=Depends(get_session)):\nuser = session.get(UserProfile, user_id)\nif not user:\nraise HTTPException(status_code=404, detail=\"User not found\")\nbook = session.get(Book, book_id)\nif not book:\nraise HTTPException(status_code=404, detail=\"Book not found\")\nuser_library = UserLibrary(user_id=user_id, book_id=book_id)\nsession.add(user_library)\nsession.commit()\nreturn {\"message\": \"Book added to user's library successfully\"}\n</code></pre>"},{"location":"lab1/#_12","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433\u043e\u0439","text":"<pre><code>@app.post(\"/user/{sender_id}/send_exchange_request/{receiver_id}\")\ndef send_exchange_request(sender_id: int, receiver_id: int, offered_book_id: int, requested_book_id: int,\nsession=Depends(get_session)):\nsender = session.get(UserProfile, sender_id)\nreceiver = session.get(UserProfile, receiver_id)\noffered_book = session.get(Book, offered_book_id)\nrequested_book = session.get(Book, requested_book_id)\nif not sender or not receiver or not offered_book or not requested_book:\nraise HTTPException(status_code=404, detail=\"Sender, receiver, or book not found\")\n# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043a\u043d\u0438\u0433\u0430 \u0432 \u0435\u0433\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435\nsender_library = session.exec(select(UserLibrary).where(\n(UserLibrary.user_id == sender_id) &amp; (UserLibrary.book_id == offered_book_id))).first()\nif not sender_library:\nraise HTTPException(status_code=400, detail=\"Sender doesn't have the book in their library\")\n# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u043a\u043d\u0438\u0433\u0430 \u0443 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\nrequester_library = session.exec(select(UserLibrary).where(\n(UserLibrary.user_id == receiver_id) &amp; (UserLibrary.book_id == requested_book_id))).first()\nif not requester_library:\nraise HTTPException(status_code=400, detail=\"Requester doesn't have the book in their library\")\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d\nexchange_request = ExchangeRequest(\nbooks_offered=offered_book,\nbooks_requested=requested_book,\naccepted=False,\nsender_id=sender_id,\nreceiver_id=receiver_id\n)\nsession.add(exchange_request)\nsession.commit()\nreturn {\"message\": \"Exchange request sent successfully\"}\n</code></pre>"},{"location":"lab1/#_13","title":"\u041f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433\u043e\u0439","text":"<pre><code>@app.put(\"/exchange_request/{request_id}/{action}\")\ndef respond_to_exchange_request(request_id: int, action: str, session=Depends(get_session)):\n# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435: accept \u0438\u043b\u0438 reject\nif action not in [\"accept\", \"reject\"]:\nraise HTTPException(status_code=400, detail=\"Invalid action. Use 'accept' or 'reject'\")\nexchange_request = session.get(ExchangeRequest, request_id)\nif not exchange_request:\nraise HTTPException(status_code=404, detail=\"Exchange request not found\")\nif action == \"accept\":\nexchange_request.accepted = True\nmessage = \"Exchange request accepted successfully\"\nelse:\nexchange_request.accepted = False\nmessage = \"Exchange request rejected successfully\"\nsession.commit()\nreturn {\"message\": message}\n</code></pre>"}]}